  app.c (app.h)
   Endless loops, which execute tasks with fixed computing time. This 
   sequential execution is only deviated from when an interrupt event occurs.

Primero define las estructuras task_cfg_t y task_dta_t. La primera es una estructura para la configuración, teniendo un puntero
a la función de inicialización, a la de actualización de dicha tarea y, además un puntero a los parámetros. 
La segunda estructura cuenta con un entero sin signo que indica el peor caso de tiempo de ejecución (en µs).

Luego declara las tareas dentro de un array task_cfg_list del tipo task_cfg_t, define las funciones del módulo de sensor, del módulo de sistema y del módulo del actuador, con parámetro NULL 
Además define la cantidad de tareas TASK_QTY.

Declara el contador de ciclos de la aplicación g_app_cnt, el contador de tiempo en µs g_app_time_us, el contador de ticks g_app_tick_cnt y una lista de tareas task_dta_list, con el largo TASK_QTY.

Luego define la función de inicialización de la aplicación void app_init(void), la cual imprime una cadena indicando que la función está corriendo y ek tick del sistema en mS.
Inicializa el contador de la aplicación y lo imprime. Llama a todas las tareas mediante un ciclo for recorriendo la lista task_cfg_list para pasar los respectivos parámetros.
También inicializa el peor caso de tiempo de ejecución WCET e inicializa el contador de ciclos.

Define la función void app_update(void), revisa si es el tick correcto para iniciar las tareas, mediante un if comparando el contador de inicio G_APP_TICK_CNT_INI con el contador
de tics de la aplicación g_app_tick_cnt. En el caso de que sea tiempo de correr las tareas, disminuye en 1 dicho contador.
Aumenta el contador de ciclos de la aplicación en 1 e inicializa el contador de tiempo (en µs). Además llama a la función para resetear el contador de ciclos.
Llama a todas las funciones de actualización de cada tarea recorriendo, en un for, la lista task_cfg_list y pasando los parámetros de la misma lista. Para luego guardar el tiempo
que tomó el ciclo (en µs) en una variable cycle_counter_time_us mediante el llamado de la función cycle_counter_time_us. Suma este tiempo cycle_counter_time_us a la variable g_app_time_us
para llevar la cuenta de cuanto tiempo lleva la aplicación. Por último revisa si el tiempo que llevó la tarea es mayor al peor caso WCET, entonces lo actualiza al valor cycle_counter_time_us

Por último se define la función void HAL_SYSTICK_Callback(void), que suma 1 a los contadores g_app_tick_cnt, g_task_sensor_tick_cnt, g_task_system_tick_cnt y g_task_actuator_tick_cnt 

...